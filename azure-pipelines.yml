trigger:
  - main
  
pool:
    vmImage: 'ubuntu-latest'
  
variables:
    #subscription: Visual Studio Enterprise(b526a136-5b78-4fa3-9bd9-00c7bdadc807)
    #resourceGroup: resourcegroup-tfstate
    #storageAccount: tfstate1085
    #container: tfstate
    #tfstateFile: terraform.tfstate
    buildConfiguration: 'Release'
    azureSubscription: 'Azure Pass - Sponsorship(44c254f7-5162-4fcc-8105-3660b0b461ba)'
    WebAppName: 'teliosPortal'
    ResourceGroupName: 'Telios'
    anyTfChanges: false
    tf_version: 1.4.2
  
    
stages:
  - stage: Provision_Infrastruture
    pool:
      vmImage: ubuntu-latest
    jobs:
    - job: Terraform_Tasks
      steps:
      - task: TerraformInstaller@0
        displayName: Terraform INSTALL
        inputs:
          terraformVersion: '$(tf_version)'
  
      - task: TerraformCLI@0
        displayName: Terraform INIT
        inputs:
          command: 'init'
          workingDirectory: '$(System.DefaultWorkingDirectory)/terra'
          backendType: 'azurerm'
          backendServiceArm: 'Visual Studio Enterprise Subscription(b526a136-5b78-4fa3-9bd9-00c7bdadc807)'
          backendAzureRmSubscriptionId: 'b526a136-5b78-4fa3-9bd9-00c7bdadc807'
          backendAzureRmResourceGroupName: 'platform'
          backendAzureRmStorageAccountName: 'platform010'
          backendAzureRmContainerName: 'platform'
          backendAzureRmKey: 'platform.tfstate'
          allowTelemetryCollection: true
      
      - task: TerraformCLI@0
        displayName: Terraform PLAN
        inputs:
          command: 'plan'
          workingDirectory: '$(System.DefaultWorkingDirectory)/terra'
          environmentServiceName: 'Visual Studio Enterprise Subscription(b526a136-5b78-4fa3-9bd9-00c7bdadc807)'
          providerAzureRmSubscriptionId: 'b526a136-5b78-4fa3-9bd9-00c7bdadc807'
          commandOptions: '-out=$(System.DefaultWorkingDirectory)/terra/tfplan -detailed-exitcode'
          allowTelemetryCollection: true
  
      
      - task: TerraformCLI@0
        displayName: Terraform APPLY
        condition: and(succeeded(), eq(variables['TERRAFORM_PLAN_HAS_CHANGES'], 'true'))
        inputs:
          command: 'apply'
          workingDirectory: '$(System.DefaultWorkingDirectory)/terra'
          environmentServiceName: 'Visual Studio Enterprise Subscription(b526a136-5b78-4fa3-9bd9-00c7bdadc807)'
          providerAzureRmSubscriptionId: 'b526a136-5b78-4fa3-9bd9-00c7bdadc807'
          commandOptions: 'tfplan'
          allowTelemetryCollection: true

  - stage: Build_Application
    pool:
      vmImage: ubuntu-latest
    jobs:
      - job: Build_DotnetApp
        steps:
          # Build and publish the application library
          - task: DotNetCoreCLI@2
            displayName: 'dotnet restore'
            inputs:
              command: restore
              projects: '**/*.csproj'
          - task: DotNetCoreCLI@2
            displayName: 'dotnet build'
            inputs:
              command: build
              projects: '**/*.csproj'
              arguments: '--configuration $(buildConfiguration)'
          - task: DotNetCoreCLI@2
            displayName: 'dotnet publish'
            inputs:
              command: publish
              publishWebProjects: True
              arguments: '--configuration $(BuildConfiguration) --output $(Build.ArtifactStagingDirectory)'
              zipAfterPublish: True
          # Publish the app as an artifact
          - publish: $(Build.ArtifactStagingDirectory)
            artifact: skedda_app
          
          - script: |
             cd $(Build.ArtifactStagingDirectory)
             tree -a